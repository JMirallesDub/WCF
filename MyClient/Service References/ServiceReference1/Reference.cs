//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyClient.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Student", Namespace="http://schemas.datacontract.org/2004/07/TestService")]
    [System.SerializableAttribute()]
    public partial class Student : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int M1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int M2Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int M3Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SidField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StudenNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int M1 {
            get {
                return this.M1Field;
            }
            set {
                if ((this.M1Field.Equals(value) != true)) {
                    this.M1Field = value;
                    this.RaisePropertyChanged("M1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int M2 {
            get {
                return this.M2Field;
            }
            set {
                if ((this.M2Field.Equals(value) != true)) {
                    this.M2Field = value;
                    this.RaisePropertyChanged("M2");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int M3 {
            get {
                return this.M3Field;
            }
            set {
                if ((this.M3Field.Equals(value) != true)) {
                    this.M3Field = value;
                    this.RaisePropertyChanged("M3");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Sid {
            get {
                return this.SidField;
            }
            set {
                if ((this.SidField.Equals(value) != true)) {
                    this.SidField = value;
                    this.RaisePropertyChanged("Sid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StudenName {
            get {
                return this.StudenNameField;
            }
            set {
                if ((object.ReferenceEquals(this.StudenNameField, value) != true)) {
                    this.StudenNameField = value;
                    this.RaisePropertyChanged("StudenName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Pollens", Namespace="http://schemas.datacontract.org/2004/07/TestService")]
    [System.SerializableAttribute()]
    public partial class Pollens : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CiudadField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FechaField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PollenField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Ciudad {
            get {
                return this.CiudadField;
            }
            set {
                if ((object.ReferenceEquals(this.CiudadField, value) != true)) {
                    this.CiudadField = value;
                    this.RaisePropertyChanged("Ciudad");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Fecha {
            get {
                return this.FechaField;
            }
            set {
                if ((object.ReferenceEquals(this.FechaField, value) != true)) {
                    this.FechaField = value;
                    this.RaisePropertyChanged("Fecha");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Pollen {
            get {
                return this.PollenField;
            }
            set {
                if ((object.ReferenceEquals(this.PollenField, value) != true)) {
                    this.PollenField = value;
                    this.RaisePropertyChanged("Pollen");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Pollen", Namespace="http://schemas.datacontract.org/2004/07/TestService")]
    [System.SerializableAttribute()]
    public partial class Pollen : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string cityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string dateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string name_pollenField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string city {
            get {
                return this.cityField;
            }
            set {
                if ((object.ReferenceEquals(this.cityField, value) != true)) {
                    this.cityField = value;
                    this.RaisePropertyChanged("city");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string date {
            get {
                return this.dateField;
            }
            set {
                if ((object.ReferenceEquals(this.dateField, value) != true)) {
                    this.dateField = value;
                    this.RaisePropertyChanged("date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string name_pollen {
            get {
                return this.name_pollenField;
            }
            set {
                if ((object.ReferenceEquals(this.name_pollenField, value) != true)) {
                    this.name_pollenField = value;
                    this.RaisePropertyChanged("name_pollen");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IMyService")]
    public interface IMyService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyService/GetData", ReplyAction="http://tempuri.org/IMyService/GetDataResponse")]
        string GetData();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyService/GetData", ReplyAction="http://tempuri.org/IMyService/GetDataResponse")]
        System.Threading.Tasks.Task<string> GetDataAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyService/GetNumber", ReplyAction="http://tempuri.org/IMyService/GetNumberResponse")]
        int GetNumber(int a, int b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyService/GetNumber", ReplyAction="http://tempuri.org/IMyService/GetNumberResponse")]
        System.Threading.Tasks.Task<int> GetNumberAsync(int a, int b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyService/GetResult", ReplyAction="http://tempuri.org/IMyService/GetResultResponse")]
        string GetResult(MyClient.ServiceReference1.Student s);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyService/GetResult", ReplyAction="http://tempuri.org/IMyService/GetResultResponse")]
        System.Threading.Tasks.Task<string> GetResultAsync(MyClient.ServiceReference1.Student s);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyService/GetTopper", ReplyAction="http://tempuri.org/IMyService/GetTopperResponse")]
        string GetTopper(MyClient.ServiceReference1.Student[] LS);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyService/GetTopper", ReplyAction="http://tempuri.org/IMyService/GetTopperResponse")]
        System.Threading.Tasks.Task<string> GetTopperAsync(MyClient.ServiceReference1.Student[] LS);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyService/GetAllPollens", ReplyAction="http://tempuri.org/IMyService/GetAllPollensResponse")]
        MyClient.ServiceReference1.Pollens[] GetAllPollens();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyService/GetAllPollens", ReplyAction="http://tempuri.org/IMyService/GetAllPollensResponse")]
        System.Threading.Tasks.Task<MyClient.ServiceReference1.Pollens[]> GetAllPollensAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyService/GetPollens", ReplyAction="http://tempuri.org/IMyService/GetPollensResponse")]
        MyClient.ServiceReference1.Pollen[] GetPollens(string initial_date, string final_date, string city, string name_pollen);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyService/GetPollens", ReplyAction="http://tempuri.org/IMyService/GetPollensResponse")]
        System.Threading.Tasks.Task<MyClient.ServiceReference1.Pollen[]> GetPollensAsync(string initial_date, string final_date, string city, string name_pollen);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMyServiceChannel : MyClient.ServiceReference1.IMyService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MyServiceClient : System.ServiceModel.ClientBase<MyClient.ServiceReference1.IMyService>, MyClient.ServiceReference1.IMyService {
        
        public MyServiceClient() {
        }
        
        public MyServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MyServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MyServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MyServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetData() {
            return base.Channel.GetData();
        }
        
        public System.Threading.Tasks.Task<string> GetDataAsync() {
            return base.Channel.GetDataAsync();
        }
        
        public int GetNumber(int a, int b) {
            return base.Channel.GetNumber(a, b);
        }
        
        public System.Threading.Tasks.Task<int> GetNumberAsync(int a, int b) {
            return base.Channel.GetNumberAsync(a, b);
        }
        
        public string GetResult(MyClient.ServiceReference1.Student s) {
            return base.Channel.GetResult(s);
        }
        
        public System.Threading.Tasks.Task<string> GetResultAsync(MyClient.ServiceReference1.Student s) {
            return base.Channel.GetResultAsync(s);
        }
        
        public string GetTopper(MyClient.ServiceReference1.Student[] LS) {
            return base.Channel.GetTopper(LS);
        }
        
        public System.Threading.Tasks.Task<string> GetTopperAsync(MyClient.ServiceReference1.Student[] LS) {
            return base.Channel.GetTopperAsync(LS);
        }
        
        public MyClient.ServiceReference1.Pollens[] GetAllPollens() {
            return base.Channel.GetAllPollens();
        }
        
        public System.Threading.Tasks.Task<MyClient.ServiceReference1.Pollens[]> GetAllPollensAsync() {
            return base.Channel.GetAllPollensAsync();
        }
        
        public MyClient.ServiceReference1.Pollen[] GetPollens(string initial_date, string final_date, string city, string name_pollen) {
            return base.Channel.GetPollens(initial_date, final_date, city, name_pollen);
        }
        
        public System.Threading.Tasks.Task<MyClient.ServiceReference1.Pollen[]> GetPollensAsync(string initial_date, string final_date, string city, string name_pollen) {
            return base.Channel.GetPollensAsync(initial_date, final_date, city, name_pollen);
        }
    }
}
